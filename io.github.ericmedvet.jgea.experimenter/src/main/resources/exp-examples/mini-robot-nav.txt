ea.experiment(
  runs = (randomGenerator = (seed = [1]) * [m.defaultRG()]) * [ea.run(
      name = "robotnav_maze_tree";
      problem = ea.p.simToSbbmo(
        simulation = ds.sat.fromEnvironment(
          environment = ds.e.navigation(
            arena = e_maze;
            initialRobotXRange = m.range(min = 0.5; max = 0.5);
            initialRobotYRange = m.range(min = 0.75; max = 0.75);
            robotMaxV = 0.05
          );
          % stopCondition = predicate.lt(f = ds.e.n.distanceFromTarget(); t = 0.01);
          dT = 0.1;
          tRange = m.range(min = 0; max = 20)
        );
        toMinObjectives = [ds.e.n.finalTimePlusD()]
      );
      solver = ea.s.mapElites(
        representation = ea.representation.multiSRTree();
        mapper = ea.mapper.nmrfToNds(of = ea.mapper.multiSrTreeToNmrf());
        nPop = 100;
        nEval = 4000;
        descriptors = [
          ea.s.me.d.descriptor(
            f = ds.e.n.x(of = ds.e.n.finalRobotP(of = ea.f.behavior(of = ea.f.quality())));
            min = 0;
            max = 1;
            nOfBins = 10
          );
          ea.s.me.d.descriptor(
            f = ds.e.n.y(of = ds.e.n.finalRobotP(of = ea.f.behavior(of = ea.f.quality())));
            min = 0;
            max = 1;
            nOfBins = 10
          )
        ]
      )
    )
  ];
  listeners = [
    ea.l.console(
      functions = [
        f.mapValue(key = "final.td"; of = ea.f.behaviorQuality(of = ea.f.quality(of = ea.f.best())); format = "%6.4f")
      ];
      onlyLast = false
    );
    ea.l.saveForRun(
      path = "../../Documenti/experiments/{name}/{startTime}/best-traj-{run.solver.name}-{run.randomGenerator.seed:%04d}";
      of = ea.acc.lastBest();
      processor = ea.f.toImage(image = ds.d.navigation(); of = ea.f.behavior(of = ea.f.quality()))
    );
    ea.l.savePlotForExp(
      path = "../../Documenti/experiments/{name}/{startTime}/best-fitness";
      plot = ea.plot.multi.quality(q = f.mapValue(key = "final.td"; of = ea.f.behaviorQuality()))
    )
  ]
)